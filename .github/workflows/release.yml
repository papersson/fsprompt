name: Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-12
            name: fsprompt-x86_64-apple-darwin
          - target: aarch64-apple-darwin
            os: macos-12
            name: fsprompt-aarch64-apple-darwin
          # Windows build
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: fsprompt-x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz fsprompt
          cd ../../..

      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target\${{ matrix.target }}\release
          7z a -tzip ..\..\..\${{ matrix.name }}.zip fsprompt.exe
          cd ..\..\..

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  build-installers:
    name: Build Installers
    needs: create-release
    strategy:
      matrix:
        include:
          - os: macos-12
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-12
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build macOS Package
        if: matrix.os == 'macos-12'
        run: |
          # Create package structure
          mkdir -p pkg/usr/local/bin
          cp target/${{ matrix.target }}/release/fsprompt pkg/usr/local/bin/
          
          # Get version from Cargo.toml
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          
          # Build the package
          pkgbuild --root pkg \
                   --identifier com.fsprompt.app \
                   --version $VERSION \
                   --install-location / \
                   fsprompt-v$VERSION-${{ matrix.target }}.pkg

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          # Install Inno Setup
          choco install innosetup -y
          
          # Create installer script
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version = "(.+)"').Matches[0].Groups[1].Value
          
          @"
          [Setup]
          AppName=fsPrompt
          AppVersion=$VERSION
          DefaultDirName={autopf}\fsPrompt
          DefaultGroupName=fsPrompt
          OutputBaseFilename=fsprompt-v$VERSION-x86_64-pc-windows-msvc-setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          
          [Files]
          Source: "target\x86_64-pc-windows-msvc\release\fsprompt.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\fsPrompt"; Filename: "{app}\fsprompt.exe"
          
          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; Flags: preservestringtype
          
          [Code]
          const
            EnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
          
          procedure RemoveDirFromPath(DirToRemove: string);
          var
            Path: string;
          begin
            if RegQueryStringValue(HKLM, EnvironmentKey, 'Path', Path) then
            begin
              Path := StringReplace(Path, ';' + DirToRemove, '', [rfReplaceAll]);
              RegWriteStringValue(HKLM, EnvironmentKey, 'Path', Path);
            end;
          end;
          
          procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
          begin
            if CurUninstallStep = usPostUninstall then
              RemoveDirFromPath(ExpandConstant('{app}'));
          end;
          "@ | Out-File -FilePath installer.iss -Encoding UTF8
          
          # Build installer
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        shell: pwsh

      - name: Upload macOS Package
        if: matrix.os == 'macos-12'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./fsprompt-v${{ github.ref_name }}-${{ matrix.target }}.pkg
          asset_name: fsprompt-v${{ github.ref_name }}-${{ matrix.target }}.pkg
          asset_content_type: application/x-newton-compatible-pkg

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Output/fsprompt-v${{ github.ref_name }}-x86_64-pc-windows-msvc-setup.exe
          asset_name: fsprompt-v${{ github.ref_name }}-x86_64-pc-windows-msvc-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable