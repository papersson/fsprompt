name: Release

on:
  push:
    tags:
      - 'v[0-9]+.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: fsPrompt ${{ github.ref_name }}
          body: |
            ## fsPrompt ${{ github.ref_name }}
            
            ### Installation
            
            See the [README](https://github.com/patrikpersson/codext-rs#installation) for detailed installation instructions.
            
            #### macOS
            - Intel: `fsprompt-${{ github.ref_name }}-x86_64-apple-darwin.pkg`
            - Apple Silicon: `fsprompt-${{ github.ref_name }}-aarch64-apple-darwin.pkg`
            
            #### Windows
            - Installer: `fsprompt-${{ github.ref_name }}-x86_64-pc-windows-msvc-setup.exe`
            
            ### Security Notes
            
            The binaries are unsigned, so you may see security warnings:
            - **macOS**: Right-click the .pkg and select "Open" to bypass Gatekeeper
            - **Windows**: Click "More info" â†’ "Run anyway" in SmartScreen
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            name: fsprompt-x86_64-apple-darwin
          - target: aarch64-apple-darwin
            os: macos-latest
            name: fsprompt-aarch64-apple-darwin
          # Windows build
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: fsprompt-x86_64-pc-windows-msvc
          # Linux build
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-20.04
            name: fsprompt-x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.name }}.tar.gz fsprompt
          cd ../../..

      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target\${{ matrix.target }}\release
          7z a -tzip ..\..\..\${{ matrix.name }}.zip fsprompt.exe
          cd ..\..\..

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  build-installers:
    name: Build Installers
    needs: create-release
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: ubuntu-20.04
            arch: x86_64
            target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build macOS Package
        if: startsWith(matrix.os, 'macos')
        run: |
          # Create package structure
          mkdir -p pkg/usr/local/bin
          cp target/${{ matrix.target }}/release/fsprompt pkg/usr/local/bin/
          
          # Get version from Cargo.toml
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          
          # Build the package
          pkgbuild --root pkg \
                   --identifier com.fsprompt.app \
                   --version $VERSION \
                   --install-location / \
                   fsprompt-v$VERSION-${{ matrix.target }}.pkg

      - name: Build Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          # Install Inno Setup
          choco install innosetup -y
          
          # Get version from Cargo.toml
          $VERSION = (Select-String -Path Cargo.toml -Pattern '^version = "(.+)"').Matches[0].Groups[1].Value
          
          # Create installer script
          @"
          [Setup]
          AppName=fsPrompt
          AppVersion=$VERSION
          DefaultDirName={autopf}\fsPrompt
          DefaultGroupName=fsPrompt
          OutputDir=.
          OutputBaseFilename=fsprompt-v$VERSION-x86_64-pc-windows-msvc-setup
          Compression=lzma
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          ChangesEnvironment=yes
          
          [Files]
          Source: "target\x86_64-pc-windows-msvc\release\fsprompt.exe"; DestDir: "{app}"; Flags: ignoreversion
          
          [Icons]
          Name: "{group}\fsPrompt"; Filename: "{app}\fsprompt.exe"
          
          [Tasks]
          Name: "addtopath"; Description: "Add fsPrompt to PATH"; GroupDescription: "Additional options:"
          
          [Registry]
          Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}"; Tasks: addtopath; Check: NeedsAddToPath('{app}')
          
          [Code]
          function NeedsAddToPath(Param: string): boolean;
          var
            OrigPath: string;
            AppDir: string;
          begin
            AppDir := ExpandConstant(Param);
            if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
              'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
              'Path', OrigPath)
            then begin
              Result := True;
              exit;
            end;
            { Check if already in path }
            Result := Pos(';' + AppDir + ';', ';' + OrigPath + ';') = 0;
            if Result then
              Result := Pos(';' + AppDir + '\;', ';' + OrigPath + ';') = 0;
          end;
          
          procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
          var
            AppDir: string;
            Path: string;
          begin
            if CurUninstallStep = usPostUninstall then
            begin
              AppDir := ExpandConstant('{app}');
              if RegQueryStringValue(HKEY_LOCAL_MACHINE,
                'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
                'Path', Path) then
              begin
                { Remove both with and without trailing backslash }
                StringChangeEx(Path, ';' + AppDir + ';', ';', True);
                StringChangeEx(Path, ';' + AppDir + '\;', ';', True);
                StringChangeEx(Path, ';' + AppDir, '', True);
                StringChangeEx(Path, ';' + AppDir + '\', '', True);
                RegWriteStringValue(HKEY_LOCAL_MACHINE,
                  'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
                  'Path', Path);
              end;
            end;
          end;
          "@ | Out-File -FilePath installer.iss -Encoding UTF8
          
          # Build installer
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss
        shell: pwsh

      - name: Upload macOS Package
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./fsprompt-v0.1.0-${{ matrix.target }}.pkg
          asset_name: fsprompt-${{ github.ref_name }}-${{ matrix.target }}.pkg
          asset_content_type: application/x-newton-compatible-pkg

      - name: Upload Windows Installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./fsprompt-v0.1.0-x86_64-pc-windows-msvc-setup.exe
          asset_name: fsprompt-${{ github.ref_name }}-x86_64-pc-windows-msvc-setup.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Build Debian Package
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Create debian package structure
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          ARCH="amd64"
          PKG_NAME="fsprompt_${VERSION}_${ARCH}"
          
          mkdir -p $PKG_NAME/DEBIAN
          mkdir -p $PKG_NAME/usr/local/bin
          
          # Copy binary
          cp target/${{ matrix.target }}/release/fsprompt $PKG_NAME/usr/local/bin/
          chmod 755 $PKG_NAME/usr/local/bin/fsprompt
          
          # Create control file
          cat > $PKG_NAME/DEBIAN/control << EOF
          Package: fsprompt
          Version: $VERSION
          Architecture: $ARCH
          Maintainer: fsPrompt Contributors <noreply@github.com>
          Description: High-performance filesystem prompt generator for LLMs
           fsPrompt converts filesystem structures and file contents into
           XML or Markdown format optimized for AI consumption.
          Homepage: https://github.com/patrikpersson/codext-rs
          Priority: optional
          Section: utils
          EOF
          
          # Build the package
          dpkg-deb --build $PKG_NAME
          
      - name: Upload Debian Package
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./fsprompt_0.1.0_amd64.deb
          asset_name: fsprompt-${{ github.ref_name }}-amd64.deb
          asset_content_type: application/vnd.debian.binary-package